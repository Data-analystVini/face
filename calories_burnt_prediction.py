# -*- coding: utf-8 -*-
"""Calories Burnt Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yeKXAjG19oBv0Uk5HgVY9jLPp5AAkLEo
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""**Data collection and preprocessing**"""

#loading the data from csv file to pandas Dataframe
calories=pd.read_csv('/content/calories.csv')

calories.head()

exercise_data=pd.read_csv('/content/exercise.csv')

exercise_data.head()

"""**Combining the two dataframes**"""

calories_data=pd.concat([exercise_data,calories['Calories']],axis=1)

calories_data.head()

#checking the number of rows and columns
calories_data.shape

#getting some information about the data
calories_data.info()

#checking for missing values
calories_data.isnull().sum()

"""**Data Analysis**"""

#get some statistical measures about the data
calories_data.describe()

"""**Data Visualization**"""

sns.set()

calories_data.replace({"Gender":{'male':0,'female':1}},inplace=True)

calories_data.head()

#plotting the gender column in count plot
sns.distplot(calories_data['Gender'])

#finding the distribution of 'Age' column
sns.distplot(calories_data['Age'])

#finding the distribution of 'Height' column
sns.distplot(calories_data['Height'])

#finding the distribution of 'Weight' column
sns.distplot(calories_data['Weight'])

"""**Finding the correlation in the dataset**

1.Positive Correlation

2.Negative Correlation **bold text**
"""

correlation=calories_data.corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True,fmt='.1f',annot=True,annot_kws={'size':8},cmap='Greens')

"""**Converting the text data to numerical values**"""

#calories_data.replace({"Gender":{'male':0,'female':1}},inplace=True)

#calories_data.head()

"""**Seperating Features and Target**"""

X=calories_data.drop(columns=['User_ID','Calories'],axis=1)
Y=calories_data['Calories']

print(X)

print(Y)

"""**Splitting the data into training data and test data**"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)

print(Y_train)

"""**Model  Training**

XGBoost Regressor **bold text**
"""

#loading the model
model=XGBRegressor()

#training the model with X_train
model.fit(X_train,Y_train)

"""**Evaluation**

**Prediction on Test Data**
"""

test_data_prediction=model.predict(X_test)

print(test_data_prediction)

#R squarred error
error_score=metrics.r2_score(Y_test,test_data_prediction)
print('R squarred error:',error_score)

Y_test=list(Y_test)

plt.figure(figsize=(18,10))
plt.plot(Y_test,color='blue',label="Actual Values")
plt.plot(test_data_prediction,color='green',label="predicted values")
plt.title('Actual Calories predicted Graph')
plt.xlabel('Number of values')
plt.ylabel('Calories values')
plt.legend()
plt.show()

input_data=(1,74 ,158 ,59, 10 ,93,39.6)
input_data_as_numpy_array=np.array(input_data)
reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=model.predict(reshaped)
print('Calorie Value of a user:',prediction[0])