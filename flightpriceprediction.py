# -*- coding: utf-8 -*-
"""Flightpriceprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oJp9LUG5MowpADTOB6FLl9Vykn3zUM4C
"""

import numpy as np
import pandas as pd

flightdata=pd.read_csv('/content/flightpricedetz.csv')

flightdata.head()

flightdata.tail()

flightdata.shape

flightdata.describe()

flightdata.info()

flightdata.isnull().sum()

type(flightdata)

flightdata.isnull().sum()

"""**Data Visualizations**"""

import matplotlib.pyplot as plt
import seaborn as sns

"""****"""

sns.set()
#DISTRIBUTION OF PRICE VALUE
plt.figure(figsize=(16,6))
sns.displot(flightdata['Price'],color='red')
plt.title('Flight Price Distribution')
plt.show()

#DISTRIBUTION OF Airline
plt.figure(figsize=(22,6))
sns.countplot(x='Airline',color='violet',data=flightdata)
plt.title('Airline Distribution')
plt.show()

#DISTRIBUTION OF SOURCE
plt.figure(figsize=(22,6))
sns.countplot(x='Source',color='green',data=flightdata)
plt.title('Source Distribution')
plt.show()
flightdata['Source'].unique()

#DISTRIBUTION OF DESTINATION
plt.figure(figsize=(22,6))
sns.countplot(x='Destination',color='black',data=flightdata)
plt.title('Destination Distribution')
plt.show()
flightdata['Destination'].unique()

#DISTRIBUTION OF ROUTE
plt.figure(figsize=(25,6))
sns.countplot(x='Route',color='maroon',data=flightdata)
plt.title('Route Distribution')
plt.show()

flightdata['Route'].value_counts()

#DISTRIBUTION OF STOPS
plt.figure(figsize=(25,6))
sns.countplot(x='Total_Stops',color='orange',data=flightdata)
plt.title('Total_Stops Distribution')
plt.show()
flightdata['Total_Stops'].unique()

#label encoding for Object Datatypes

#importing LabelEncoder library
from sklearn.preprocessing import LabelEncoder

encoder=LabelEncoder()
flightdata['Airline']=encoder.fit_transform(flightdata['Airline'])
flightdata['Source']=encoder.fit_transform(flightdata['Source'])
flightdata['Destination']=encoder.fit_transform(flightdata['Destination'])
flightdata['Route']=encoder.fit_transform(flightdata['Route'])
flightdata['Total_Stops']=encoder.fit_transform(flightdata['Total_Stops'])

flightdata.head()

flightdata['Total_Stops'].value_counts()

#correlation
correlation=flightdata.corr()
plt.figure(figsize=(8,6))
sns.heatmap(flightdata.corr())

#seperating the data and labels
X=flightdata.drop(columns=['Duration','Price'],axis=1)
Y=flightdata['Price']

print(X)

print(Y)

#convert all values in to one type
from sklearn.preprocessing import StandardScaler

#Balancing the input datas ie normalization
scaler=StandardScaler()
scaler.fit(X)
standard_data=scaler.transform(X)
print(standard_data)

X=standard_data
Y=flightdata['Price']

print(Y)

from sklearn.model_selection import train_test_split

#splitting into training and testing data

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=5)
print(X.shape,X_train.shape,X_test.shape)

#loading the Linear Regression Model
from sklearn.linear_model import LinearRegression

#Model Training
model=LinearRegression()
model.fit(X_train,Y_train)

#Model Evaluation on training
training_data_prediction=model.predict(X_train)

from sklearn import metrics

#R squared Value is a metric
r2_score=metrics.r2_score(Y_train,training_data_prediction)
print('R squared Value on training:',r2_score)

#model evaluation on testing
test_data_prediction=model.predict(X_test)
r2_score=metrics.r2_score(Y_test,test_data_prediction)
print('R squared Value on testing:',r2_score)

#model training using RandomForest Regressor

from sklearn.ensemble import RandomForestRegressor

#model training
regressor=RandomForestRegressor(n_estimators=100)
regressor.fit(X_train,Y_train)

#Model Evaluation on training
training_data_prediction=regressor.predict(X_train)

r2_score=metrics.r2_score(Y_train,training_data_prediction)
print('R squared Value on training:',r2_score)

#model evaluation on testing
test_data_prediction=regressor.predict(X_test)
r2_score=metrics.r2_score(Y_test,test_data_prediction)
print('R squared Value on testing:',r2_score)

Y_test=list(Y_test)

# ploting a graph with Y test and predicted Data
plt.figure(figsize=(30,4))
plt.plot(Y_test,color='blue',label="Actual Values")
plt.plot(test_data_prediction,color='green',label="predicted Values")
plt.title('ACTUAL v/S PREDICTED VALUES')
plt.xlabel('Number of Values')
plt.ylabel('Price values')
plt.legend()
plt.show()

flightdata.tail()

input_data=(4,0,2,18,4)
input_data_as_numpy_array=np.array(input_data)
reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=regressor.predict(reshaped)
print("THE PRICE OF FLIGHT :",prediction[0])

airline=input("enter your Airline ,:IndiGo,Air India,Jet Airways,SpiceJet,Multiple carriers,Vistara,Air Asia,GoAir....\n")
if airline=='IndiGo':
     airline1=0
elif airline=='Air India':
     airline1=1
elif airline=='GoAir':
     airline1=2
elif airline=='Jet Airways':
     airline1=3
elif airline=='SpiceJet':
     airline1=4
elif airline=='Multiple carriers':
    airline1=5
elif airline=='Vistara':
    airline1=6
else:
    airline1=7

source=input("Enter the source:Banglore,Mumbai,Delhi,Kolkata,Chennai....\n")
if source=='Banglore':
  source1=0
elif source=='Mumbai':
    source1=1
elif source=='Delhi':
    source1=2
elif source=='Kolkata':
    source1=3
else:
  source1=4

dest=input("Enter the destination:Banglore,Mumbai,Delhi,Kolkata,Chennai,Cochin,Hyderabad .....\n")
if dest=='Banglore':
    dest1=0
elif dest=='Mumbai':
    dest1=1
elif dest=='Delhi':
    dest1=2
elif dest=='Kolkata':
    dest1=3
elif dest=='Chennai':
    dest1=4
elif dest=='Cochin':
    dest1=5
else:
    dest1=6

route=input("Enter your Route choice :BLR → DEL, DEL → BOM → COK, BLR → BOM → DEL, CCU → BOM → BLR....")
if route=='BLR → DEL':
   route1=0
elif route=='DEL → BOM → COK':
    route1=1
elif route=='BLR → BOM → DEL':
    route1=2
else:
  route1=3

stop=input("Enter the no of Stops required:non-stop,2 stops,1 stop..... \n")
if stop=='non-stop':
  stop1=0
elif stop=='2 stops':
    stop1=1
else:
  stop1=2

input_data=(airline1,source1,dest1,route1,stop1)
#changing the input data into a numpy array
input_data_as_numpy_array=np.array(input_data)
#reshape the array
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction=regressor.predict(input_data_reshaped)
#print(prediction)
print('The Flight Price INR',prediction[0])